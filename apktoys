#!/bin/sh
# apktoys

# Your local aports directory.
APORTS_DIRECTORY="$HOME"/aports

# Internal functions

# `__at_cd_aports` - changes the current working directory to aports and
# uses a trap to cd back into the previous directory on exit
__at_cd_aports() {
	current_dir="$PWD"
	cd "$APORTS_DIRECTORY"
	trap "cd $current_dir" EXIT INT TERM
}

# `__at_argparse` - separates arguments (all that starts with -, unless --
# specified) from regular parameters. Returns the arguments, then :, then
# the parameters, allowing for end users to split the two apart for further
# parsing.
__at_argparse() {
	local further_arguments_are_parameters
	further_arguments_are_parameters=0

	args=''
	params=''

	for arg in $*; do
		if [ "$arg" = '--' ]; then
			# -- passed, all further arguments are parameters
			further_arguments_are_parameters=1
			continue
		fi

		if [ "$further_arguments_are_parameters" = '1' ] && \
			[ "${arg::1}" = '-' ]; then
			args="$args $arg"
		else
			params="$params $arg"
		fi
	done

	args="$(echo $args | sed -e 's/^[[:space:]]*//')"
	params="$(echo $params | sed -e 's/^[[:space:]]*//')"

	echo "$args:$params"
}

# `at-repoforpkg <package>` - returns a string like `repository/pkgname`.
# usually used internally for the other commands, but may be useful in other
# cases.
at_repoforpkg() {
	case $1 in
		*'/'*) echo "$1"; return 0;; # already in repository/pkgname format
		'') return 1;; # no pkg provided
		'pwd') pkgname=$(basename $PWD);;
		*) pkgname=$1;;
	esac

	directory="$(find $APORTS_DIRECTORY -name $pkgname -type d -maxdepth 2 | head -n1)"
	if [ ! "$directory" ]; then
		echo "Package $pkgname not found" 1>&2
		exit 1
	fi
	clean_name="${directory/$APORTS_DIRECTORY/}"

	if [ "${clean_name::1}" = '/' ]; then
		echo "${clean_name/\//}"
	else
		echo "$clean_name"
	fi
}

# `at-commit <template> <package> [data] [--amend/-m]` - runs a git commit from
# a given template. `<template>` is one of `upgrade`, `move`.
#
# `[data]` is used differently depending on the template: for `upgrade` it's
# the new version, for `move` it's the old repository.
# If `package` == pwd, assumes current directory.
at_commit() {
	argparse="$(__at_argparse $*)"

	amend='false'
	do_reset='true'
	for arg in $args; do
		case $arg in
			'--amend'|'-m') amend='true';;
			'--no-reset'|'-n') do_reset='false';;
		esac
	done

	template="$(echo $argparse | cut -d ' ' -f1)"
	template="${template:1}" # strip leading :
	raw_package="$(echo $argparse | cut -d ' ' -f2)"
	data="$(echo $argparse | cut -d ' ' -f3)"

	package="$(at_repoforpkg $raw_package)" || exit 1

	case $template in
		'upgrade') msg="$package: upgrade to $data";;
		'move') msg="$package: move from $data";;
		*) echo "Invalid template $template"; exit 1;;
	esac

	if [ $do_reset = 'true' ]; then
		set -e
		git reset
		git add "$APORTS_DIRECTORY"/$package
		if [ "$template" = 'move' ]; then
			git add "$APORTS_DIRECTORY"/$data/"$(basename $package)"
		fi
		set +e
	fi

	if [ "$amend" = 'true' ]; then
		git commit --amend -m "$msg"
	else
		git commit -m "$msg"
	fi
}

# `at-newpkg <package> [<package> <package> ...]` - takes package names and
# commits the packages with the given names.
at_newpkg() {
	argparse="$(__at_argparse $*)"
	args="$(echo $argparse | cut -d: -f1)"
	pkgs="${argparse##$args:}"

	__at_cd_aports

	if [ $2 ]; then
		# More than 2 packages; rebase
		git reset --hard origin/master
	fi

	echo $pkgs

	for pkg in $pkgs; do
		pkg_with_repo="$(at_repoforpkg $pkg)" || exit 1;
		git add "$APORTS_DIRECTORY/$pkg_with_repo"
		cd "$APORTS_DIRECTORY/$pkg_with_repo"
		source APKBUILD

		msg="$pkg_with_repo: new aport

$url
$pkgdesc"
		if git show HEAD | grep "$pkg_with_repo: new aport"; then
			git commit --amend -m "$msg"
		else
			git commit -m "$msg"
		fi
	done
}

# `at-upgrade <package> [--amend/-m]` - shorthand for
# `at-commit upgrade <package> (pkgver) [--amend/-m]`, you still need to do
# everything else manually.
at_upgrade() {
	package=$(at_repoforpkg $1) || exit 1
	source "$APORTS_DIRECTORY"/$package/APKBUILD
	at_commit upgrade $package $pkgver $2
}

# `at-install-makedepends [<package>]` - installs depends, makedepends and
# checkdepends for the package. if package name is not provided, assumes
# name from current working directory.
at_install_makedepends() {
	if [ ! $1 ]; then
		package="$(basename $PWD)"
	else
		package=$1
	fi

	package_path="$APORTS_DIRECTORY"/$(at_repoforpkg $package) || exit 1

	source "$package_path"/APKBUILD
	# yes, abuild -r uses .makedepends-$pkname, but it also autoremoves it,
	# which is kind of counterintuitive... so we use our own custom name
	$SUDO apk add --virtual .at-makedepends-$pkgname $depends $checkdepends $makedepends
}

# `at-uninstall-makedepends [<package>]` - uninstalls makedepends installed by
# `at-install-makedepends`.
at_uninstall_makedepends() {
	if [ ! $1 ]; then
		package="$(basename $PWD)"
	else
		package=$1
	fi

	package_path="$APORTS_DIRECTORY"/$(at_repoforpkg $package) || exit 1

	source "$package_path"/APKBUILD
	$SUDO apk del .at-makedepends-$pkgname
}

if [ $1 ]; then
	if [ ! $SUDO ]; then
		SUDO=sudo
	fi

	command=$1
	shift
	case $command in
		'repoforpkg') at_repoforpkg $1 || exit 1;;
		'newpkg') at_newpkg $@ || exit 1;;
		'commit') at_commit $@ || exit 1;;
		'upgrade') at_upgrade $@ || exit 1;;
		'install-makedepends') at_install_makedepends $1 || exit 1;;
		'uninstall-makedepends') at_uninstall_makedepends $1 || exit 1;;
		*) echo "Unknown command $command"; exit 1;;
	esac
fi
